<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.xiewenlin</groupId>
    <artifactId>newton</artifactId>
    <version>1.0-SNAPSHOT</version>

    <!--配置发布打包格式-->
    <packaging>war</packaging>

    <!--添加中文编码处理-->
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>
    <!--添加底层servlet依赖-->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>3.1.0</version>
        <!--由于Tomcat自带了Servlet所对应的jar包,所以可将其 scope设置
            为 provided，如果某些依赖只是运行时需要,但无须参与编译
            (例如,JsTL的jar包),可设置为 runtime-->
            <scope>provided</scope>
        </dependency>
     <!-- 添加单元测试组件JUnit -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>
        <!-- 配置日志依赖项：SLF4J 在框架中会大量使用日志输出,最流行的日志框架就是Log4J了，
             SLF4J是日志框架的接口，而Log4J只是日志框架的一种实现。只需添加以下依赖,就能
             同时引入SLF4J与Log4J两个依赖,因为 Maven依赖是有传递性的-->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <version>1.7.7</version>
        </dependency>
        <!-- 配置MySQL驱动依赖项 -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>5.1.33</version>
            <scope>runtime</scope>
        </dependency>
        <!-- 配置Apache Commons DbUtils的作用： 简化数据库操作代码，封装通用操作-->
        <dependency>
            <groupId>commons-dbutils</groupId>
            <artifactId>commons-dbutils</artifactId>
            <version>1.6</version>
        </dependency>
        <!-- 配置Apache DBCP的作用：频繁创建数据库连接会造成大量的系统开销,
        因为数据库的连接数是有限的。因此,需要一个“数据库连接池”，而Apache DBCP
        是最好的数据库连接池之一。 -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-dbcp2</artifactId>
            <version>2.0.1</version>
        </dependency>
        <!--新增tools.jar工具插件依赖-->
        <dependency>
            <groupId>sun.jdk</groupId>
            <artifactId>tools</artifactId>
            <version>1.8.0</version>
            <scope>system</scope>
            <systemPath>${java.home}/../lib/tools.jar</systemPath>
        </dependency>
        <!-- https://mvnrepository.com/artifact/cglib/cglib -->
        <dependency>
            <groupId>cglib</groupId>
            <artifactId>cglib</artifactId>
            <version>3.2.10</version>
        </dependency>
        <dependency>
            <groupId>com.esotericsoftware</groupId>
            <artifactId>reflectasm</artifactId>
            <version>1.11.7</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.javassist/javassist -->
        <dependency>
            <groupId>org.javassist</groupId>
            <artifactId>javassist</artifactId>
            <version>3.24.1-GA</version>
        </dependency>

    </dependencies>

    <build>
    <plugins>
        <!-- 编译插件 -->
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <version>3.6.0</version>
            <!--配置Java版本-->
            <configuration>
                <source>1.8</source>
                <target>1.8</target>
                <compilerArguments>
                    <!-- 是否输出所有的编译信息（包括类的加载等）-->
                    <!--<verbose />-->
                    <!-- 解决maven命令编译报错，因为rt.jar 和jce.jar在jre的lib下面，不在jdk的lib下面，
                    导致maven找不到（java7以后会出现这个问题），将这2个jar包拷贝到jdk的lib下面估计也好使-->
                    <bootclasspath>${java.home}\lib\rt.jar;${java.home}\lib\jce.jar</bootclasspath>
                </compilerArguments>
            </configuration>
        </plugin>
        <!-- 配置测试插件：surefire插件用来在maven构建生命周期的test phase执行一个应用的单元测试。
             它使用该插件很简单,使用mvn surefire:test或者mvn test都可以运行工程下的单元测试。 -->
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <version>2.18.1</version>
            <configuration>
                <skipTests>true</skipTests>
            </configuration>
        </plugin>
        <!-- Tomcat服务器插件 -->
        <plugin>
            <groupId>org.apache.tomcat.maven</groupId>
            <artifactId>tomcat7-maven-plugin</artifactId>
            <version>2.2</version>
            <configuration>
                <path>/${project.artifactId}</path>
            </configuration>
        </plugin>
        <!--新增rt.jar工具插件依赖-->
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <version>3.7.0</version>
            <configuration>
                <source>1.8</source>
                <target>1.8</target>
                <encoding>UTF-8</encoding>
                <compilerArguments>
                    <verbose />
                    <bootclasspath>${java.home}/jre/lib/rt.jar${path.separator}${java.home}/jre/lib/rt.jar</bootclasspath>
                </compilerArguments>
            </configuration>
        </plugin>
    </plugins>
    </build>

</project>